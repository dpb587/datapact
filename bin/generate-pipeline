#!/bin/bash

set -eu

# args: repository-path pipeline-base jobs

repository="$1"
pipeline_base="$2"
jobs="$3"

file_pre=$(mktemp ${TMPDIR:-/tmp}/datapact-pre.XXXXXX)
file_post=$(mktemp ${TMPDIR:-/tmp}/datapact-post.XXXXXX)
file_jobs=$(mktemp ${TMPDIR:-/tmp}/datapact-jobs.XXXXXX)
file_job=$(mktemp ${TMPDIR:-/tmp}/datapact-job.XXXXXX)

cp "$jobs" $file_jobs
cp "$pipeline_base" $file_pre

cd "$repository"

for branch in $( jq -r '.[].branch' < $file_jobs ); do
  jq --arg branch "$branch" 'map(select(.branch == $branch))[0]' < $file_jobs > $file_job
  jq \
    --argfile job $file_job \
    '
      . + {
        "jobs": (
          .jobs +
          [
            {
              "name": $job.branch,
              "plan": [
                {
                  "aggregate": (
                    $job.input // [] | map({
                      "get": .branch,
                      "trigger": true,
                      "passed": (if .passed == false then [] else [
                        .branch
                      ] end)
                    })
                  )
                },
                {
                  "task": $job.branch,
                  "config": {
                    "platform": ($job.task.platform // "linux"),
                    "image_resource": {
                      "type": ($job.task.image.type // "docker-image"),
                      "source": $job.task.image.source
                    },
                    "run": ($job.task.run // {}),
                    "params": ($job.task.env // {}),
                    "inputs": (
                      $job.input // [] | map({
                        "name": .branch
                      })
                    ),
                    "outputs": [
                      {
                        "name": "result"
                      }
                    ]
                  },
                  "privileged": ($job.task.privileged // false)
                },
                {
                  "put": $job.branch,
                  "get_params": {
                    "download": false
                  }
                }
              ]
            }
          ]
        ),
        "resources": (
          .resources +
          [
            {
              "name": $job.branch,
              "type": "datapact",
              "source": (
                .resources | map(select(.name == "datapact-job"))[0].source
                + {
                  "branch": $job.branch
                }
              ),
              "check_interval": (.resources | map(select(.name == "datapact-job"))[0].check_interval)
            }
          ]
        )
       }
    ' \
    < $file_pre \
    > $file_post
  cp $file_post $file_pre
done

jq -S \
  '
    . + {
      "groups": .groups,
      "jobs": (.jobs | sort_by(.name)),
      "resources": (.resources | sort_by(.name) | map(select(.name != "datapact-job"))),
      "resource_types": (
        .resource_types +
        [
          {
            "name": "datapact",
            "type": "docker-image",
            "source": {
              "repository": "dpb587/datapact-resource"
            }
          }
        ]
        | sort_by(.name)
      )
    } as $p | $p + { "groups": ( [ { "name": "all", "jobs": ( $p.jobs | map(.name) ) } ] + $p.groups ) }
  ' \
  < $file_pre
