#!/bin/bash

set -eu

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

# @todo why are we starting in /root?
cd /tmp/build/put

taskdir="$PWD"
payload=$(mktemp ${TMPDIR:-/tmp}/datapact-resource-request.XXXXXX)
cat > $payload

# validate our inputs
result="$( jq -r '.params.result // "result"' < $payload )"
repository="$( jq -r '.params.repository // ""' < $payload )"
branch="$( jq -r '.source.branch // ""' < $payload )"
s3_endpoint="$( jq -r '.source.s3_endpoint // "https://s3.amazonaws.com"' < $payload )"
s3_access_key_id="$( jq -r '.source.s3_access_key_id // ""' < $payload )"
s3_secret_access_key="$( jq -r '.source.s3_secret_access_key // ""' < $payload )"
s3_signature="$( jq -r '.source.s3_signature // "S3v4"' < $payload )"
export s3_bucket="$( jq -r '.source.s3_bucket // ""' < $payload )"
export s3_prefix="$( jq -r '.source.s3_prefix // ""' < $payload )"
export GIT_COMMITTER_NAME="Concourse"
export GIT_COMMITTER_EMAIL="concourse@localhost"
export GIT_AUTHOR_NAME="$( jq -r '.source.committer_name // env.GIT_COMMITTER_NAME' < $payload )"
export GIT_AUTHOR_EMAIL="$( jq -r '.source.committer_email // env.GIT_COMMITTER_EMAIL' < $payload )"

if [ -z "$repository" ]; then
  repository=/tmp/datapact-git
  /opt/resource/git/in $repository < $payload > /dev/null
fi

if [ ! -e "$repository" ]; then
  echo "invalid source: repository: missing" >&2
  exit 1
elif [ -z "$result" ]; then
  echo "invalid source: result: empty" >&2
  exit 1
elif [ -z "$branch" ]; then
  echo "invalid source: branch: empty" >&2
  exit 1
elif [ -z "$s3_endpoint" ]; then
  echo "invalid source: s3_endpoint: empty" >&2
  exit 1
elif [ -z "$s3_bucket" ]; then
  echo "invalid source: s3_bucket: empty" >&2
  exit 1
elif [ -z "$s3_access_key_id" ]; then
  echo "invalid source: s3_access_key_id: empty" >&2
  exit 1
elif [ -z "$s3_secret_access_key" ]; then
  echo "invalid source: s3_secret_access_key: empty" >&2
  exit 1
elif [ -z "$s3_signature" ]; then
  echo "invalid source: s3_signature: empty" >&2
  exit 1
fi

mc --quiet config host add blobs "$s3_endpoint" "$s3_access_key_id" "$s3_secret_access_key" "$s3_signature" > /dev/null

# find our inputs
inputs_file=$(mktemp ${TMPDIR:-/tmp}/datapact-inputs.XXXXXX)
inputs="$( find . -path '*/.datapact/result' | grep -v "^\./$branch/" || true )"
cat /dev/null $inputs | jq -sS 'map(select(.)) | sort_by(.name)' > $inputs_file

cd $result

if [ -e .datapact/metadata.json ]; then
  metadata_file="$PWD/.datapact/metadata.json"
else
  metadata_file=/dev/null
fi

# upload result files
result_outputs=$(mktemp ${TMPDIR:-/tmp}/datapact-result-outputs.XXXXXX)

for path in $( find . -type f ! -path "./.datapact*" ); do
  localblob="$( echo "$path" | cut -c3- )"
  filters=""

  echo -n "$localblob "

  if [[ ! "$localblob" =~ \.(bin|tgz|gz)$ ]]; then
      echo -n "-> compress "
      gzip "$localblob"
      localblob="$localblob.gz"
      filters="$filters,gz"
  fi

  echo -n "-> checksum "
  blobname=$( sha1sum "$localblob" | awk '{print $1 }' )
  sha256=$( sha256sum "$localblob" | awk '{print $1 }' )
  remotesize=$( ls -l "$localblob" | awk '{print $5}' )
  remoteblob="$branch/$blobname"

  echo -n "-> upload "
  mc --quiet cp "$localblob" "blobs/$s3_bucket/$s3_prefix$remoteblob" > /dev/null


  jq -nc \
    --arg "blobname" "$blobname" \
    --arg "remotesize" "$remotesize" \
    --arg "sha256" "$sha256" \
    --arg "localblob" "$localblob" \
    --arg "filters" "$filters" \
    '
      {
        "path": $localblob,
        "blob": $blobname,
        "size": ( $remotesize | tonumber ),
        "checksum": {
          "sha256": $sha256
        },
        "filters": ($filters | split(",") | map(select(. != "")))
      } | to_entries | map(select(.key != "filters" or ((.value|length) > 0))) | from_entries
    ' \
    >> $result_outputs

  echo "-> done"
done

# write our result
result_file=$(mktemp ${TMPDIR:-/tmp}/datapact-result.XXXXXX)
timestamp="$( date -u +"%Y-%m-%dT%H:%M:%SZ" )"

jq -sS \
  --arg timestamp "$timestamp" \
  --arg branch "$branch" \
  --argjson inputs "$( cat $inputs_file )" \
  --slurpfile metadata "$metadata_file" \
  '
    {
      "timestamp": $timestamp,
      "branch": $branch,
      "metadata": ($metadata // []),
      "input": ($inputs | map({branch,result,metadata,timestamp}|to_entries|map(select(.key != "metadata" or ((.value|length) > 0)))|from_entries)),
      "output": sort_by(.path)
    } | to_entries|map(select(.key != "metadata" or ((.value|length) > 0)))|from_entries
  ' \
  < $result_outputs \
  > $result_file

# commit our result
commit_message=$(mktemp ${TMPDIR:-/tmp}/datapact-commit.XXXXXX)

result_id=$( jq -rc 'if .input | length > 0 then .input else [{"branch":"datapact-timestamp","result":.timestamp}] end | map({"input":{branch,result}})[]' < "$result_file" | sha1sum | awk '{ print $1 }' )
deepname=$( echo "$result_id" | sed -E 's#(..)(......................................)#result/\1/\2.json#' )

cd $taskdir
cd $repository
mkdir -p "$( dirname "$deepname" )"
cp $result_file $deepname

echo "build $BUILD_ID" > $commit_message
echo >> $commit_message

if [ -z "${BUILD_PIPELINE_NAME:-}" ]; then
  echo "$ATC_EXTERNAL_URL/builds/$BUILD_ID" >> $commit_message
else
  echo "$ATC_EXTERNAL_URL/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME" >> $commit_message
fi

echo >> $commit_message
jq -rcS '.input | map({"input":{branch,result}})[]' < $result_file >> $commit_message

git add $deepname
git commit -F "$commit_message" -- $deepname

# do it
# @todo filter out datapact params
# @todo rewrite metadata with our own matching in
jq \
  --arg repository "$repository" \
  '. * {"params":{"rebase":true,"repository":$repository}}' \
  < $payload \
  | /opt/resource/git/out "$taskdir" \
  >&3
